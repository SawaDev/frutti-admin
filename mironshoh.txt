@reversing array
.data
array:  .word 1, 2, 3, 4, 5
size:   .word 5

.text
.global _start
_start:
    ldr r0, =array   @ Load the address of the array
    ldr r1, =size    @ Load the size of the array
    ldr r1, [r1]

    mov r2, #0      @ Pointer to the beginning of the array
    mov r3, #4      @ Size of each element (assuming 4 bytes)

    add r4, r0, r1, LSL #2  @ Pointer to the end of the array

loop:
    cmp r0, r4      @ Compare the two pointers
    bge endloop     @ If they have crossed or are equal, end the loop

    ldr r5, [r0]    @ Load the value from the beginning pointer
    ldr r6, [r4]    @ Load the value from the end pointer

    str r6, [r0]    @ Store the end value at the beginning
    str r5, [r4]    @ Store the beginning value at the end

    add r0, r0, r3  @ Increment the beginning pointer
    sub r4, r4, r3  @ Decrement the end pointer

    b loop

endloop:
    b endprog

endprog:





@@@@@@@@buble_sort
.data 
array: .word -45, 53, 76, -10, 39,79
size: .word 6
.text
.global _start
_start:
ldr r0, =array
ldr r1,=size
ldr r1,[r1]
bl buble_sort

b endprog
 buble_sort:
mov r2, #0 @ i
sub r1, r1, #1 @n-1
outer_loop:
  cmp r2, r1
 bge end_outer_loop 
 mov r3, #0 @ j
  inner_loop:
  sub r4, r1, r2 @ n-i-1  
  cmp r3, r4
  bge end_inner_loop  
  add r7, r3, #1  
  ldr r5, [r0, r3, lsl #2]
  ldr r6, [r0, r7, lsl #2] 
  cmp r5, r6  
  ble skipif
     str r6, [r0, r3, lsl #2]
   str r5, [r0, r7, lsl #2]  
  skipif:  
  add r3, r3, #1  
  b inner_loop  
 end_inner_loop:
 add r2, r2, #1
  b outer_loop
  
end_outer_loop:
bx lr
endprog:


@@@@@fibanaci


@storing fibonacci numbers into array
.data
array:  .space 60 @4 bytes each number
size: .word 15

.text
.global _start
_start:
   
ldr r0, =array
ldr r1, =size @count of numbers
ldr r1,[r1]
bl fibonacci

b endprog

fibonacci:
mov r2, #0 @first fibonacci
str r2, [r0], #4 @store r2 to r0 addres and increase addres number by 4

mov r3, #1 @second number
str r3, [r0], #4

mov r4, #2

loop:

add r2, r2, r3
str r2, [r0], #4

mov r5, r2
mov r2, r3
mov r3, r5

add r4, r4, #1

cmp r4, r1
blt loop  

bx lr
   
endprog:


@@@@selection sort
.data 
array: .word -45, 53, 76, -10, 39
size: .word 5
.text
.global _start
_start: 
ldr r0, =array
ldr r1, =size
ldr r1,[r1]
bl selection_sort

b endprog

selection_sort:
 push {r2, r3, r5, r6, r7, r8, r9, r10, r11} 
mov r2, #0 @ i
sub r8, r1, #1 @n-1
outer_loop:
  cmp r2, r8 
  bge end_outer_loop 
  mov r7, r2 @min index
 add r3, r2, #1 @ j = i+1
inner_loop:  
  cmp r3, r1 
  bge end_inner_loop 
    ldr r5, [r0, r3, lsl #2]
  ldr r6, [r0, r7, lsl #2]  
  cmp r5, r6 
  ble skipif   
  mov r7, r3 
  skipif:
  add r3, r3, #1
    b inner_loop
    end_inner_loop: 
    ldr r9, [r0, r2, lsl #2]  @array[i]
  mov r11, r9 @ temp = array[i]  
  ldr r10, [r0, r7, lsl #2]  @array[minindex]
  str r10, [r0, r2, lsl #2] @array[i] = array[minindex]
  str r11, [r0, r7, lsl #2] @array[minindex] = temp   
  add r2, r2, #1
  b outer_loop  
  end_outer_loop:  
   pop {r2, r3, r5, r6, r7, r8, r9, r10, r11}   
bx lr



endprog:
